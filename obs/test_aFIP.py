# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAFIP():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_aFIP(self):
    # Test name: AFIP
    # Step # | name | target | value
    # 1 | open | /contribuyente_/login.xhtml | 
    self.driver.get("https://auth.afip.gob.ar/contribuyente_/login.xhtml")
    # 2 | setWindowSize | 1382x736 | 
    self.driver.set_window_size(1382, 736)
    # 3 | click | id=F1:username | 
    self.driver.find_element(By.ID, "F1:username").click()
    # 4 | type | id=F1:username | 20052221294
    self.driver.find_element(By.ID, "F1:username").send_keys("20052221294")
    # 5 | click | id=F1:btnSiguiente | 
    self.driver.find_element(By.ID, "F1:btnSiguiente").click()
    # 6 | type | id=F1:password | Medifarm2023
    self.driver.find_element(By.ID, "F1:password").send_keys("Medifarm2023")
    # 7 | click | id=iconoVer | 
    self.driver.find_element(By.ID, "iconoVer").click()
    # 8 | click | id=F1:btnIngresar | 
    self.driver.find_element(By.ID, "F1:btnIngresar").click()
    # 9 | click | linkText=Ver todos | 
    self.driver.find_element(By.LINK_TEXT, "Ver todos").click()
    # 10 | runScript | window.scrollTo(0,0) | 
    self.driver.execute_script("window.scrollTo(0,0)")
    # 11 | click | css=.col-xs-12:nth-child(63) .roboto-font | 
    self.vars["window_handles"] = self.driver.window_handles
    # 12 | selectWindow | handle=${win8489} | 
    self.driver.find_element(By.CSS_SELECTOR, ".col-xs-12:nth-child(63) .roboto-font").click()
    # 13 | click | id=__EVID__546146__EV__e-button__ | 
    self.vars["win8489"] = self.wait_for_window(2000)
    # 14 | click | id=__EVID__448085__EV__e-file__-btnSearch | 
    self.driver.switch_to.window(self.vars["win8489"])
    # 15 | type | id=__EVID__448085__EV__e-file__-input | C:\fakepath\Carga de Facturas - vf.pdf
    self.driver.find_element(By.ID, "__EVID__546146__EV__e-button__").click()
    # 16 | click | id=__EVID__778733__EV__e-button__ | 
    self.driver.find_element(By.ID, "__EVID__448085__EV__e-file__-btnSearch").click()
    # 17 | click | id=__EVID__075149__EV__e-button__ | 
    self.driver.find_element(By.ID, "__EVID__448085__EV__e-file__-input").send_keys("C:\\fakepath\\Carga de Facturas - vf.pdf")
    # 18 | mouseOver | id=__EVID__075149__EV__e-button__ | 
    self.driver.find_element(By.ID, "__EVID__778733__EV__e-button__").click()
    # 19 | click | id=__EVID__766993__EV__e-button__ | 
    self.driver.find_element(By.ID, "__EVID__075149__EV__e-button__").click()
    # 20 | mouseOver | id=__EVID__766993__EV__e-button__ | 
    element = self.driver.find_element(By.ID, "__EVID__075149__EV__e-button__")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.ID, "__EVID__766993__EV__e-button__").click()
    element = self.driver.find_element(By.ID, "__EVID__766993__EV__e-button__")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
  
